@RESTRESOURCE(urlMapping='/Cases/*')
global with sharing class CaseRest {
@HttpGet
    global static Case getCaseById(){
        RestRequest request = RestContext.request;
        String caseId = request.requestURI.substring(request.requestURI.lastIndexOf('/')+1);
        
        Case result = [Select Subject,Status,Origin,Priority From Case Where Id=:caseId];
        return result;
    }
@HttpPost
    global static Id createCase(String subj,String sta, String org, String pri){
        Case thisCase=new Case(Subject=subj,Status=sta,Origin=org,Priority=pri);
        insert thisCase;
        return thisCase.Id;
    }
    
@HttpDelete
    global static void deleteCase(){
         RestRequest request = RestContext.request;
        String caseId = request.requestURI.substring(request.requestURI.lastIndexOf('/')+1);
        
        case thisCase = [Select Id from Case where id=:caseId];
        delete thisCase;
    }
@HttpPut
    global static ID upsertCase(String sub,string sta,string ori,string pri,string id){
        Case thisCase = new Case(Id=id,Subject=sub,Status=sta,origin=ori,priority=pri);
        upsert thisCase;
        return thisCase.Id;
    }
@HttpPatch
    global static ID updateCseField(){
        RestRequest request = RestContext.request;
        String caseId = request.requestURI.substring(request.requestURI.lastIndexOf('/')+1);
        
        Case thisCase = [Select Id from case where Id=:caseId];
        Map<String,Object> params = (Map<String,Object>)Json.deserializeUntyped(request.requestBody.toString());
        
        for(String fieldName:params.keyset()){
            thisCase.put(fieldName,params.get(fieldName));
        }
        update thisCase;
        return thisCase.Id;
    }
}
